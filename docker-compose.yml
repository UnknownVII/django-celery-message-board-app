name: "my-docker-project"

services:
  app:
    build: .
    image: my-app-image
    # container_name: my-app-container
    command: /app/entrypoint.sh
    ports:
      - "8000"
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      RENDER_EXTERNAL_HOSTNAME: ${RENDER_EXTERNAL_HOSTNAME}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_ADDRESS: ${EMAIL_ADDRESS}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis

  subscribe-service-1:
    build: .
    image: my-app-image
    command: /app/entrypoint-service.sh
    container_name: my-subscribe-service-container-1
    ports:
      - "7001:7000"
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      RENDER_EXTERNAL_HOSTNAME: ${RENDER_EXTERNAL_HOSTNAME}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_ADDRESS: ${EMAIL_ADDRESS}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .:/subscribe-service
    depends_on:
      - postgres
      - redis

  subscribe-service-2:
    build: .
    image: my-app-image
    command: /app/entrypoint-service.sh
    container_name: my-subscribe-service-container-2
    ports:
      - "7002:7000"
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      RENDER_EXTERNAL_HOSTNAME: ${RENDER_EXTERNAL_HOSTNAME}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_ADDRESS: ${EMAIL_ADDRESS}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .:/subscribe-service
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres
    container_name: my-postgres-container
    ports:
      - "5432:5432"
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      RENDER_EXTERNAL_HOSTNAME: ${RENDER_EXTERNAL_HOSTNAME}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_ADDRESS: ${EMAIL_ADDRESS}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: "redis:alpine"
    container_name: my-redis-container
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  celery:
    image: my-app-image
    container_name: my-celery-container
    command: celery -A a_core worker -E -l info
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      RENDER_EXTERNAL_HOSTNAME: ${RENDER_EXTERNAL_HOSTNAME}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_ADDRESS: ${EMAIL_ADDRESS}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis
      - app

  flower:
    image: my-app-image
    container_name: my-flower-container
    command: celery -A a_core flower --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - "5555:5555"
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      RENDER_EXTERNAL_HOSTNAME: ${RENDER_EXTERNAL_HOSTNAME}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_ADDRESS: ${EMAIL_ADDRESS}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      FLOWER_USER: ${FLOWER_USER}
      FLOWER_PASSWORD: ${FLOWER_PASSWORD}
    depends_on:
      - redis

  beat:
    image: my-app-image
    container_name: my-beat-container
    command: celery -A a_core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      RENDER_EXTERNAL_HOSTNAME: ${RENDER_EXTERNAL_HOSTNAME}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_ADDRESS: ${EMAIL_ADDRESS}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      FLOWER_USER: ${FLOWER_USER}
      FLOWER_PASSWORD: ${FLOWER_PASSWORD}
    depends_on:
      - redis
      - app

  kong:
    image: kong:latest
    container_name: kong
    ports:
      - "8445:8443" # Public API traffic (SSL)
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_LOG_LEVEL: "info"
      KONG_DECLARATIVE_CONFIG: /kong.yml
    volumes:
      - ./kong.yml:/kong.yml:ro

  kong-2:
    image: kong:latest
    container_name: kong-2
    ports:
      - "7445:8443" # Public API traffic (SSL)
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_LOG_LEVEL: "info"
      KONG_DECLARATIVE_CONFIG: /kong-2.yml
    volumes:
      - ./kong-2.yml:/kong-2.yml:ro

volumes:
  postgres_data:
  redis_data:
